#include <iostream>
#include <sstream>
using namespace std;
class Celda{
    public:
        Celda(int _x=0, int _y=0){
            x = _x; y = _y;
        }
        int valor=NULL, x, y;

    public:
        int setValue (int _valor){
            valor = _valor;
        }

        int getValue (){
            return valor;
        }

        int isKnown (){
            if (valor != NULL)
                return 0;
            else
                return 1;
        }
};

int checkPyramid (Celda pyr[][6],int change){
if(change==1){
    change=0;
    for(int y = 0; y < 6; y++)
        for(int x = 0; x <= y; x++ )
        {
            if (pyr[x][y].isKnown() == 0 && pyr[x+1][y].isKnown() == 0 && pyr[x][y-1].isKnown() == 1)
            {
                pyr[x][y-1].setValue(pyr[x][y].valor + pyr[x+1][y].valor);
                change=1;
            }
            else
            {
                if (pyr[x][y].isKnown() == 0 && pyr[x+1][y].isKnown() == 1 && pyr[x][y-1].isKnown() == 0)
                {
                    pyr[x+1][y].setValue(pyr[x][y-1].valor - pyr[x][y].valor);
                    change=1;
                }
                else
                {
                    if (pyr[x][y].isKnown() == 1 && pyr[x+1][y].isKnown() == 0 && pyr[x][y-1].isKnown() == 0)
                    {
                        pyr[x][y].setValue(pyr[x][y-1].valor - pyr[x+1][y].valor);
                        change=1;
                    }
                   /* else{
                        if(pyr[x][y].isKnown() == 0 && pyr[x+1][y].isKnown() == 0 && pyr[x][y-1].isKnown() == 0 && (pyr[x][y].valor + pyr[x+1][y].valor) != pyr[x][y-1].valor){
                            return 1;
                        }
                    }*/

                    }
                }
            }
       checkPyramid (pyr,change);
        }
return 0;
}




void showPyramid(Celda pyr[][6]){
stringstream ss;
for(int y = 0; y < 6; y++){
        cout<<endl<<endl;
        for (int j=6; j>y; j--)
            cout<<"   ";
        for(int x = 0; x <= y; x++ )
            if (pyr[x][y].valor != NULL)
            {
                ss.width(6);
                ss << pyr[x][y].valor;
                cout << ss.str();
                ss.str("");
            }
            else
            {
                ss.width(6);
                ss << "()";
                cout << ss.str();
                ss.str("");
            }
}
cout<<endl;

}

int main()
{
    cout <<"---------------------------------------------------"<<endl<< "Piramide Inicial" << endl;
    Celda pyr[6][6];
    for(int y = 0; y < 6; y++)
        for(int x = 0; x <= y; x++ )
            pyr[x][y] = Celda(x,y);

 pyr[0][0].setValue (52);
    pyr[0][1].setValue (26);
    pyr[0][2].setValue (12);
    pyr[0][3].setValue (5);
    pyr[0][4].setValue (2);
    pyr[0][5].setValue (1);
    showPyramid(pyr);
cout<<"---------------------------------------------------"<<endl;
    if (checkPyramid (pyr,1)==0){
    cout<<"Piramide Resuelta"<<endl;
     showPyramid(pyr);
    }
     else{
    cout<<"La piramide no puede resolverse";
     }
cout<<"---------------------------------------------------"<<endl;
    return 0;
}
