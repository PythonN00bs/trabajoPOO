#include <iostream>
#include <sstream>

using namespace std;
class Celda{
    public:
        Celda(int _x=0, int _y=0){
            x = _x; y = _y;
        }
        int valor=NULL, x, y;

        int setValue (int _valor){
            valor = _valor;
        }

        int getValue (){
            return valor;
        }

        int isKnown (){
            if (valor != NULL)
                return 0;
            else
                return 1;
        }
};

class Pyramid{
public:
    Celda pyr[6][6];
    Pyramid(){
        for(int y = 0; y < 6; y++)
            for(int x = 0; x <= y; x++ )
                pyr[x][y] = Celda(x,y);
    }

    void Setvalues (){
        pyr[0][5].setValue (6);
        pyr[1][5].setValue (5);
        pyr[2][5].setValue (4);
        pyr[3][5].setValue (3);
        pyr[4][5].setValue (2);
        pyr[5][5].setValue (1);
        pyr[2][4].setValue (8);
    }

    void solve ();
    void show ();
    int check();
    int Completed();

};

void Pyramid::solve (){
for (int a = 0; a < 5; ++a)             //Maximo que se tiene que recorrer la piramide para completarla
    for(int y = 0; y < 6; ++y)
        for(int x = 0; x <= y; ++x )
        {
            if (pyr[x][y].isKnown() == 0 && pyr[x+1][y].isKnown() == 0 && pyr[x][y-1].isKnown() == 1)
            {
                pyr[x][y-1].setValue(pyr[x][y].valor + pyr[x+1][y].valor);
            }
            else
            {
                if (pyr[x][y].isKnown() == 0 && pyr[x+1][y].isKnown() == 1 && pyr[x][y-1].isKnown() == 0)
                {
                    if ((pyr[x][y-1].valor - pyr[x][y].valor)>0)
                        pyr[x+1][y].setValue(pyr[x][y-1].valor - pyr[x][y].valor);
                    else
                        break;
                }
                else
                {
                    if (pyr[x][y].isKnown() == 1 && pyr[x+1][y].isKnown() == 0 && pyr[x][y-1].isKnown() == 0)
                    {
                        if ((pyr[x][y-1].valor - pyr[x+1][y].valor)>0)
                            pyr[x][y].setValue(pyr[x][y-1].valor - pyr[x+1][y].valor);
                        else
                            break;
                    }
                }
            }
        }
return;
}

int Pyramid::check (){
int vm=0;
for(int y = 1; y < 6; ++y)
    for(int x = 0; x < y; ++x )
        if ((pyr[x][y].valor + pyr[x+1][y].valor) != pyr[x][y-1].valor)
            vm=1;
return vm;
}

int Pyramid::Completed (){
int verify=0;
for(int y = 0; y < 6; ++y)
    for(int x = 0; x <= y; ++x )
        if (pyr[x][y].isKnown()==1)
            verify=1;
return verify;
}


void Pyramid::show(){
stringstream ss;
for(int y = 0; y < 6; ++y){
        cout<<endl<<endl;
        for (int j=6; j>y; --j)
            cout<<"   ";
        for(int x = 0; x <= y; ++x )
            if (pyr[x][y].valor != NULL)
            {
                ss.width(6);
                ss << pyr[x][y].valor;
                cout << ss.str();
                ss.str("");
            }
            else
            {
                ss.width(6);
                ss << "()";
                cout << ss.str();
                ss.str("");
            }
}
cout<<endl;
}

int main()
{
    cout <<"---------------------------------------------------"<<endl<< "Piramide Inicial" << endl;

    Pyramid pyr;
    pyr.Setvalues();
    pyr.show();

    cout<<"---------------------------------------------------";

    pyr.solve();
    cout<<endl;
    if (pyr.check()==1 || pyr.Completed()==1)
        cout << endl << "No se puede resolver"<<endl;
    else
    {
        cout<<"Piramide Resuelta"<<endl;
        pyr.show();
    }

    cout<<"---------------------------------------------------"<<endl;

    return 0;
}
